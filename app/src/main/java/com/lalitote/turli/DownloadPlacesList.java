package com.lalitote.turli;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import android.os.AsyncTask;
import android.util.Log;

import com.google.android.gms.maps.GoogleMap;

/** A class, to download Google Places */
public class DownloadPlacesList extends AsyncTask<String, Integer, String> {

	String data = null;
	private GoogleMap googleMap;
	private MainActivity currentActivity;

	public DownloadPlacesList(GoogleMap googleMap, MainActivity currentActivity) {
		this.googleMap = googleMap;
		this.currentActivity = currentActivity;
	}

	// Invoked by execute() method of this object
	@Override
	protected String doInBackground(String... url) {
		try {
			data = downloadUrl(url[0]);
		} catch (Exception e) {
			Log.d("Background Task", e.toString());
		}
		return data;
	}

	// Executed after the complete execution of doInBackground() method
	@Override
	protected void onPostExecute(String result) {
		MarkerParseAndPlaceOnMap parserTask = new MarkerParseAndPlaceOnMap(
				googleMap, currentActivity);

		// Start parsing the Google places in JSON format
		// Invokes the "doInBackground()" method of the class ParseTask
		parserTask.execute(result);
	}

	/**
	 * A method to download json data from url. Used to get raw POI data
	 * generated by google maps as response to our query string
	 *
	 * @param strUrl
	 * @return
	 * @throws IOException
	 */
	private String downloadUrl(String strUrl) throws IOException {
		String data = "";
		InputStream iStream = null;
		HttpURLConnection urlConnection = null;
		try {
			URL url = new URL(strUrl);

			// Creating an http connection to communicate with url
			urlConnection = (HttpURLConnection) url.openConnection();

			// Connecting to url
			urlConnection.connect();

			// Reading data from url
			iStream = urlConnection.getInputStream();

			BufferedReader br = new BufferedReader(new InputStreamReader(
					iStream));
			StringBuffer sb = new StringBuffer();
			String line = "";
			while ((line = br.readLine()) != null) {
				sb.append(line);
			}

			data = sb.toString();
			br.close();

		} catch (Exception e) {
			Log.d("Exception while downloading url", e.toString());
		} finally {
			iStream.close();
			urlConnection.disconnect();
		}

		return data;
	}

}
